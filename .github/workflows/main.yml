name: backup push...

on:
  push:
    branches:
      - main

permissions:
  contents: write

concurrency:
  group: sync-main-to-backup-${{ github.ref }}
  cancel-in-progress: true

env:
  BACKUP_BRANCH: backup-Wataamee777
  # Set to "true" to always force push; "false" to skip push when no changes.
  FORCE_PUSH: "false"

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: true

      - name: Ensure git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch all refs
        run: |
          git fetch --all --prune

      - name: Prepare backup branch
        id: prepare_branch
        run: |
          set -e
          echo "Using backup branch: $BACKUP_BRANCH"
          # Create or reset local backup branch to origin/main (or to current HEAD if origin/main missing)
          if git show-ref --verify --quiet "refs/remotes/origin/main"; then
            git checkout -B "$BACKUP_BRANCH" origin/main
          else
            git checkout -B "$BACKUP_BRANCH"
          fi

          # Check whether remote backup branch exists and compare SHAs
          if git ls-remote --exit-code --heads origin "$BACKUP_BRANCH" >/dev/null 2>&1; then
            echo "リモートバックアップブランチが存在します: origin/$BACKUP_BRANCH"
            LOCAL_SHA=$(git rev-parse HEAD)
            REMOTE_SHA=$(git rev-parse "origin/$BACKUP_BRANCH")
            echo "ローカル=$LOCAL_SHA"
            echo "リモート=$REMOTE_SHA"
            if [ "$LOCAL_SHA" = "$REMOTE_SHA" ]; then
              echo "up_to_date=true" >> "$GITHUB_OUTPUT"
              echo "main と $BACKUP_BRANCH の間に変更なし。プッシュをスキップします。"
            else
              echo "up_to_date=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "up_to_date=false" >> "$GITHUB_OUTPUT"
            echo "リモートバックアップブランチが存在しないため、新規プッシュします。"
          fi

      - name: Push backup branch to origin
        if: steps.prepare_branch.outputs.up_to_date != 'true' || env.FORCE_PUSH == 'true'
        run: |
          set -e
          echo "Pushing $BACKUP_BRANCH to origin"
          if [ "$FORCE_PUSH" = "true" ]; then
            git push origin "$BACKUP_BRANCH" --force-with-lease
          else
            git push origin "$BACKUP_BRANCH"
          fi

      - name: Skip push (already up-to-date)
        if: steps.prepare_branch.outputs.up_to_date == 'true'
        run: |
          echo "バックアップは既に最新です。何もすることがありません。"
